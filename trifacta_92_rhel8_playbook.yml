---
- hosts: all
  become: true


# installed the AMI ami-08970fb2e5767e3b8
# https://us-west-2.console.aws.amazon.com/ec2/v2/home?region=us-west-2#ImageDetails:imageId=ami-08970fb2e5767e3b8


  vars:
    # don't change any of the following settings
    upload_location: /root/trifacta_temp
    trifacta_install_dir: /opt/trifacta
    trifacta_version: "9.2.0"
    trifacta_build: "224"
    local_home_install: "."
    rhel_version: "el8"
    trifacta_server_deps: "trifacta-server-deps-{{trifacta_version}}-{{trifacta_build}}-{{rhel_version}}.tar.gz"
    trifacta_server_rpm: "trifacta-server-{{trifacta_version}}-{{trifacta_build}}.{{rhel_version}}.x86_64.rpm"


  tasks:

    - name: Create {{upload_location}} if it does not exist
      ansible.builtin.file:
        path: '{{upload_location}}'
        state: directory
        owner: 'root'
        group: 'root'
        mode: '0755'


    - name: Download dependencies file ({{trifacta_server_deps}})
      get_url:
        url: "https://www.dropbox.com/s/ziqcgjnb19m0oj1/{{trifacta_server_deps}}?dl=1"
        dest: "{{upload_location}}/{{trifacta_server_deps}}"
        checksum: "md5:d5e530aac5ce16e1d77100758560a858"

    - name: Download trifacta RPM ({{trifacta_server_rpm}})
      get_url:
        url: "https://www.dropbox.com/s/axl7ybkfvcxm4ny/{{trifacta_server_rpm}}?dl=1"
        dest: "{{upload_location}}/{{trifacta_server_rpm}}"
        checksum: "md5:dccc81fde313c53cfacfdc8edc94bea8"


    - name: Unarchive ({{trifacta_server_deps}})
      unarchive:
        src: "{{ upload_location }}/{{ trifacta_server_deps }}"
        dest: "{{upload_location}}"
        owner: "root"
        group: "root"
        mode: "o-w+r"
        remote_src: yes


    - name: copy local.repo
      copy:
        src: '{{ upload_location }}/local.repo'
        dest: /etc/yum.repos.d/
        remote_src: yes


    - name: trifacta repo directory status
      stat:
        path: /var/local/trifacta
      register: trifacta_repo_status


    - name: Move trifacta repo directory
      command: "mv {{ upload_location }}/trifacta /var/local/"
      when: trifacta_repo_status.stat.exists == False


    - name: install python3
      dnf:
        name:
          - python3
          - python3-setuptools
        disablerepo: "*"
        enablerepo: "local"
        state: present

    - name: install java 8 from local repo
      dnf:
        name:
          - java-1.8.0-openjdk-devel
        disablerepo: "*"
        enablerepo: local
        state: present

    - name: postgress dnf install
      dnf:
        name: 'postgresql12-server'
        disablerepo: "*"
        enablerepo: local
        state: present

# in the documentation it calls for installing  'postgresql-client-12' which is incorrect
    - name: postgress client dnf install
      dnf:
        name: 'postgresql12-libs'
        disablerepo: "*"
        enablerepo: local
        state: present

    - name: install nodejs, nginx
      dnf:
        disablerepo: "*"
        enablerepo: local
        name:
          - nodejs
          - nginx
        state: present

    - name: install trifacta
      dnf:
        disablerepo: "*"
        enablerepo: local
        disable_gpg_check: yes
        name: "{{ upload_location }}/{{ trifacta_server_rpm }}"
        state: present


    - name: copy license file
      copy:
        src: "./license.json"
        dest: "{{ trifacta_install_dir }}/license/license.json"
        owner: trifacta
        group: trifacta
        remote_src: false

    - name: encrypt key
      command: echo "trifacta" > {{trifacta_install_dir}}/conf/.key/customerKey

    - name: Check if PostgreSQL database is initialized.
      stat:
        path: "/var/lib/pgsql/12/data/pg_hba.conf.bak"
      register: pg_hba_bak


    - name: Run PostgreSQL setup
      when: not pg_hba_bak.stat.exists
      block:

        - name: init db
          command: /usr/pgsql-12/bin/postgresql-12-setup initdb
          # args:
          #   creates: /var/lib/pgsql/12/data

        - name: backup /var/lib/pgsql/12/data/pg_hba.conf  /var/lib/pgsql/12/data/pg_hba.conf.bak
          copy:
            remote_src: yes
            src: /var/lib/pgsql/12/data/pg_hba.conf
            dest: /var/lib/pgsql/12/data/pg_hba.conf.bak

        - name: cp {{trifacta_install_dir}}/bin/setup-utils/db/pg_hba.conf.SAMPLE /var/lib/pgsql/12/data/pg_hba.conf
          copy:
            src: "{{trifacta_install_dir}}/bin/setup-utils/db/pg_hba.conf.SAMPLE"
            dest: /var/lib/pgsql/12/data/pg_hba.conf
            remote_src: yes
            owner: postgres
            group: postgres

        - name: Start service postgresql-12, if not running
          service:
            name: postgresql-12
            enabled: yes
            state: started

        - name: initialize the database
          command: "{{trifacta_install_dir}}/bin/setup-utils/db/trifacta-create-postgres-roles-dbs.sh"

#       end of postgres install block

    - name: Start service postgresql-12, if not running
      service:
        name: postgresql-12
        enabled: yes
        state: started
      when: pg_hba_bak.stat.exists

    - name: change permisions to fix issue [JIRA]
      file:
        dest: "{{trifacta_install_dir}}/conf"
        owner: trifacta
        group: trifacta
        recurse: yes

    - name: copy update_conf.py
      copy:
        src: './update_conf.py'
        dest: '{{upload_location}}/update_conf.py'

    - name: copy config.txt
      copy:
        src: './config.txt'
        dest: '{{upload_location}}/config.txt'

    - name: run update conf
      command: python3 {{upload_location}}/update_conf.py {{upload_location}}


    - name: Start trifacta service, if not running
      service:
        name: trifacta
        state: started
